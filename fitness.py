# -*- coding: utf-8 -*-
"""Fitness.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u7L2_BjOPni8zaLFtv-Kj_wjL5MMfm74
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors     import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import statsmodels.api as sm
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_iris

df = pd.read_csv('exercise_dataset.csv')

df.head()

df.drop('ID',axis=1,inplace=True)

df.info()

df.describe()

df['Exercise'].unique()

df.isna().sum()

df.drop(['Weather Conditions'],axis=1, inplace=True)

df.head()

df.groupby(by='Gender').mean()

df.groupby(by='Gender').mean()

df['Exercise'].value_counts()

sns.heatmap(df.corr(),cmap='magma',annot=True,fmt='.3f')

np.where(df['Age']==20)

plt.bar(df.groupby(by='Gender').mean().index,df.groupby(by='Gender').mean().iloc[:,0],width=0.2)
plt.xlabel('Gender')
plt.ylabel('Calories Burn')
plt.title('Calories Burn by Gender')
plt.show()

plt.figure(figsize=(12,6))
plt.pie(df["Gender"].value_counts().values,labels=df["Gender"].value_counts().index,autopct="%1.0f%%",explode=(0.1,0))
plt.title("Male-Female Ratio")
plt.show()

plt.figure(figsize=(12,6))
plt.pie(df["Exercise"].value_counts().values,labels=df["Exercise"].value_counts().index,autopct="%.02f%%")
plt.title("Exercise Ratio")
plt.show()

df.groupby(by='Age').mean().head()

plt.bar(df.groupby(by='Age').mean().index,df.groupby(by='Age').mean().iloc[:,1],label='Dream Weight')
plt.bar(df.groupby(by='Age').mean().index,df.groupby(by='Age').mean().iloc[:,2],color='darkred',label='Actual Weight',bottom=df.groupby(by='Age').mean().iloc[:,1])
plt.xlabel('Age')
plt.ylabel('Mean Values')
plt.legend()
plt.show()

plt.plot(df.groupby(by='Age').mean().index,df.groupby(by='Age').mean().iloc[:,1],label='Dream Weight')
plt.plot(df.groupby(by='Age').mean().index,df.groupby(by='Age').mean().iloc[:,2],color='r',label='Actual Weight')
plt.xlabel('Age')
plt.ylabel('Mean Values')
plt.legend()
plt.show()

GE=df.groupby(by=["Gender","Exercise"]).mean()

df.head

plt.scatter(df.groupby(by='Exercise').mean().iloc[:,0], df.groupby(by='Exercise').mean().iloc[:,6],color='blue',marker='x')
plt.xlabel("Mean Calories Burn by Exercise")
plt.ylabel("Mean BMI by Exercise")
plt.title('Calories Burn and BMI Relation')
plt.show()

plt.scatter(df.groupby(by='Exercise').mean().iloc[:,0], df.groupby(by='Exercise').mean().iloc[:,2],  color='red',marker='s')
plt.xlabel("Mean Calories Burn by Exercise")
plt.ylabel("Mean Actual Weight by Exercise")
plt.title('Calories Burn and Actual Weight Relation')
plt.show()

ssp = sns.scatterplot(data=df.head(50),x="Age",y="Actual Weight",hue="Gender",palette="husl",style='Exercise')
plt.title("Actual Weight to Age")
sns.move_legend(ssp,loc="upper left",bbox_to_anchor=(1.01, 1))

df1 = pd.get_dummies(df,columns={'Gender','Exercise'},drop_first=True)

df1.head()

df1.info()

"""# **Train and Test**

"""

x1 = df1.drop('Actual Weight',axis=1)
y1 = df1['Actual Weight']
X_train,X_test,Y_train,Y_test = train_test_split(x1,y1,test_size=0.2,random_state=11)

X_test.shape
X_train.shape

"""# Modelling by LinearRegression"""

reg = LinearRegression()
model = reg.fit(x_train,y_train)
y_score = model.score(x_test,y_test)
y_score

y_prediction = model.predict(x_test)

def linearRegression(X_train, X_test, Y_train, Y_test):
  regressor = LinearRegression()
  regressor.fit(X_train,Y_train)
  score = regressor.score(X_test, Y_test)
  return score
linearRegression(x_train,x_test, y_train, y_test)

"""# Modelling by KNN"""

knn = KNeighborsRegressor(n_neighbors=11)
model2 = knn.fit(x_train,y_train)
model2.score(x_test,y_test)
y_pred2 = model2.predict(x_test)

knndf = load_iris()
X = knndf.data
y = knndf.target
knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train, y_train)
print(knn.score(X_test, y_test))